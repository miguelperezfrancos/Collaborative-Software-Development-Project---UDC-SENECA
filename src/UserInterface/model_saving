import sys
from PySide6.QtWidgets import QApplication, QWidget, QPushButton, QVBoxLayout, QFileDialog, QMessageBox
from PySide6.QtCore import Qt
import joblib
from sklearn.linear_model import LinearRegression
import pandas as pd
import numpy as np

class GuardarModelo(QWidget):
    def __init__(self, modelo, X, y, descripcion, r2, mse):
        super().__init__()
        self.modelo = modelo
        self.X = X
        self.y = y
        self.descripcion = descripcion
        self.r2 = r2
        self.mse = mse
        self.initUI()

    def initUI(self):
        self.setWindowTitle('Guardar Modelo de Regresión Lineal')
        self.setGeometry(300, 300, 300, 100)

        layout = QVBoxLayout()

        btn_guardar = QPushButton('Guardar Modelo', self)
        btn_guardar.clicked.connect(self.guardar_modelo)
        layout.addWidget(btn_guardar)

        self.setLayout(layout)

    def guardar_modelo(self):
        try:
            archivo, _ = QFileDialog.getSaveFileName(
                self,
                "Save model",
                "",
                "Joblib files (*.joblib);;All Files (*)"
            )
            if archivo:
                # Preparar los datos a guardar
                datos_modelo = {
                    'modelo': self.modelo,
                    'formula': self.obtener_formula(),
                    'descripcion': self.descripcion,
                    'metricas': {
                        'r2': self.r2,
                        'mse': self.mse
                    },
                    'columnas_entrada': list(self.X.columns),
                    'columna_salida': self.y.name
                }
                
                # Guardar el modelo
                joblib.dump(datos_modelo, archivo)
                
                QMessageBox.information(self, "Éxito", "El modelo se ha guardado correctamente.")
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Ocurrió un error al guardar el modelo: {str(e)}")

    def obtener_formula(self):
        coef = self.modelo.coef_
        intercept = self.modelo.intercept_
        formula = f"y = {intercept:.4f}"
        for i, col in enumerate(self.X.columns):
            formula += f" + {coef[i]:.4f} * {col}"
        return formula

def main(modelo, X, y, descripcion, r2, mse):
    app = QApplication(sys.argv)
    ex = GuardarModelo(modelo, X, y, descripcion, r2, mse)
    ex.show()
    sys.exit(app.exec())

# Ejemplo de uso:
if __name__ == "__main__":
    # Simulamos tener un modelo, datos y métricas
    X = pd.DataFrame({'x1': [1, 2, 3], 'x2': [4, 5, 6]})
    y = pd.Series([10, 20, 30], name='y')
    modelo = LinearRegression().fit(X, y)
    r2 = 0.95
    mse = 2.5
    descripcion = "Este es un modelo de ejemplo"

    main(modelo, X, y, descripcion, r2, mse)